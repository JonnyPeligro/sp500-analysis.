{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNwszneWDwuBtcZ4pL2BXCq"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":41,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KQ8zW1QKfr51","executionInfo":{"status":"ok","timestamp":1724444289676,"user_tz":300,"elapsed":2171,"user":{"displayName":"Jonnathan Bareño","userId":"04240742750931729838"}},"outputId":"26db1099-f376-4459-9122-71c7f519df7b","collapsed":true},"outputs":[{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.1.4)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (1.26.4)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (3.7.1)\n","Requirement already satisfied: seaborn in /usr/local/lib/python3.10/dist-packages (0.13.1)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.3.2)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.1)\n","Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.1)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.2.1)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (4.53.1)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.4.5)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (24.1)\n","Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (9.4.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (3.1.2)\n","Requirement already satisfied: scipy>=1.5.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.13.1)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.5.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\n"]}],"source":["#Paso 1\n","#Instalar librerias necesarias.\n","!pip install pandas numpy matplotlib seaborn scikit-learn"]},{"cell_type":"code","source":["#Paso 2\n","#Guardar el archivo en la ruta /content/sp500_precios_diarios_3_meses.csv y leer los 5 primeros resultados con panda\n","import pandas as pd\n","\n","# Cargar el archivo CSV en un DataFrame\n","df = pd.read_csv('/content/sp500_precios_diarios_3_meses.csv')\n","\n","# Ver los primeros registros\n","df.head()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"collapsed":true,"id":"4qrZD8EvgFjx","executionInfo":{"status":"ok","timestamp":1724444289335,"user_tz":300,"elapsed":6,"user":{"displayName":"Jonnathan Bareño","userId":"04240742750931729838"}},"outputId":"e5085ef9-ce8c-4f71-8bda-698373dec0c6"},"execution_count":42,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         Date    Symbol   Close\n","0  2024-06-03  TechWave  175.00\n","1  2024-06-04  TechWave  177.89\n","2  2024-06-05  TechWave  180.76\n","3  2024-06-06  TechWave  183.63\n","4  2024-06-07  TechWave  183.50"],"text/html":["\n","  <div id=\"df-286386b8-0577-46ae-b64d-bc8f1845be17\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Date</th>\n","      <th>Symbol</th>\n","      <th>Close</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2024-06-03</td>\n","      <td>TechWave</td>\n","      <td>175.00</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2024-06-04</td>\n","      <td>TechWave</td>\n","      <td>177.89</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2024-06-05</td>\n","      <td>TechWave</td>\n","      <td>180.76</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2024-06-06</td>\n","      <td>TechWave</td>\n","      <td>183.63</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2024-06-07</td>\n","      <td>TechWave</td>\n","      <td>183.50</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-286386b8-0577-46ae-b64d-bc8f1845be17')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-286386b8-0577-46ae-b64d-bc8f1845be17 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-286386b8-0577-46ae-b64d-bc8f1845be17');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c78d6fd5-ddec-4cbd-880a-8769c8dd765e\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c78d6fd5-ddec-4cbd-880a-8769c8dd765e')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c78d6fd5-ddec-4cbd-880a-8769c8dd765e button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 6500,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 65,\n        \"samples\": [\n          \"2024-08-15\",\n          \"2024-08-26\",\n          \"2024-06-03\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Symbol\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 100,\n        \"samples\": [\n          \"SolarWave\",\n          \"GreenWave\",\n          \"Vector Industries\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 116.2825785331568,\n        \"min\": 88.76,\n        \"max\": 519.51,\n        \"num_unique_values\": 6016,\n        \"samples\": [\n          224.25,\n          232.1,\n          176.18\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":42}]},{"cell_type":"code","source":["#paso 3\n","#Manejo de valores nulos\n","print(df.isnull().sum())  # Verificar si hay valores nulos\n","df = df.dropna()  # Eliminar filas con valores nulos\n","\n","# paso4\n","#Convertir 'Date' a datetime y ordenar por 'Symbol' y 'Date'\n","df['Date'] = pd.to_datetime(df['Date'])  # Convertir a datetime\n","df = df.sort_values(by=['Symbol', 'Date'])  # Ordenar los datos\n","\n","# Ver los primeros registros después de la limpieza\n","df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":275},"collapsed":true,"id":"xCC59em0iY0j","executionInfo":{"status":"ok","timestamp":1724444293116,"user_tz":300,"elapsed":546,"user":{"displayName":"Jonnathan Bareño","userId":"04240742750931729838"}},"outputId":"295e8ecf-3b40-48cd-c0c3-04068ab8809a"},"execution_count":43,"outputs":[{"output_type":"stream","name":"stdout","text":["Date      0\n","Symbol    0\n","Close     0\n","dtype: int64\n"]},{"output_type":"execute_result","data":{"text/plain":["           Date        Symbol   Close\n","4095 2024-06-03  AeroDynamics  466.36\n","4096 2024-06-04  AeroDynamics  467.40\n","4097 2024-06-05  AeroDynamics  472.19\n","4098 2024-06-06  AeroDynamics  474.44\n","4099 2024-06-07  AeroDynamics  478.09"],"text/html":["\n","  <div id=\"df-6c8989ea-b4bd-46e5-bd21-d9f478e4e22a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Date</th>\n","      <th>Symbol</th>\n","      <th>Close</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>4095</th>\n","      <td>2024-06-03</td>\n","      <td>AeroDynamics</td>\n","      <td>466.36</td>\n","    </tr>\n","    <tr>\n","      <th>4096</th>\n","      <td>2024-06-04</td>\n","      <td>AeroDynamics</td>\n","      <td>467.40</td>\n","    </tr>\n","    <tr>\n","      <th>4097</th>\n","      <td>2024-06-05</td>\n","      <td>AeroDynamics</td>\n","      <td>472.19</td>\n","    </tr>\n","    <tr>\n","      <th>4098</th>\n","      <td>2024-06-06</td>\n","      <td>AeroDynamics</td>\n","      <td>474.44</td>\n","    </tr>\n","    <tr>\n","      <th>4099</th>\n","      <td>2024-06-07</td>\n","      <td>AeroDynamics</td>\n","      <td>478.09</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6c8989ea-b4bd-46e5-bd21-d9f478e4e22a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6c8989ea-b4bd-46e5-bd21-d9f478e4e22a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6c8989ea-b4bd-46e5-bd21-d9f478e4e22a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-1bdc7ceb-167f-465b-907e-52e6d526c19c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1bdc7ceb-167f-465b-907e-52e6d526c19c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-1bdc7ceb-167f-465b-907e-52e6d526c19c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 6500,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2024-06-03 00:00:00\",\n        \"max\": \"2024-08-30 00:00:00\",\n        \"num_unique_values\": 65,\n        \"samples\": [\n          \"2024-08-15 00:00:00\",\n          \"2024-08-26 00:00:00\",\n          \"2024-06-03 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Symbol\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 100,\n        \"samples\": [\n          \"StarEdge\",\n          \"NovaWorks\",\n          \"QuantumStream\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 116.2825785331568,\n        \"min\": 88.76,\n        \"max\": 519.51,\n        \"num_unique_values\": 6016,\n        \"samples\": [\n          482.46,\n          145.02,\n          309.31\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":43}]},{"cell_type":"code","source":["\n","#Paso 5\n","# Calcular la variación porcentual diaria AGrupamos todo en la columna Return\n","df['Return'] = df.groupby('Symbol')['Close'].pct_change()\n","\n","#Paso 6\n","#verificar si no hay valores nulos en Retunr\n","# Manejar valores nulos en la columna 'Return'\n","df = df.dropna(subset=['Return'])  # Eliminar filas con valores nulos en 'Return'\n","\n","# Ver los primeros registros después de calcular los retornos\n","df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"collapsed":true,"id":"SLXCNQLRnKVD","executionInfo":{"status":"ok","timestamp":1724445040807,"user_tz":300,"elapsed":828,"user":{"displayName":"Jonnathan Bareño","userId":"04240742750931729838"}},"outputId":"04fd6e67-91c6-488e-ec3c-743f595219af"},"execution_count":58,"outputs":[{"output_type":"execute_result","data":{"text/plain":["           Date        Symbol   Close    Return\n","4097 2024-06-05  AeroDynamics  472.19  0.010248\n","4098 2024-06-06  AeroDynamics  474.44  0.004765\n","4099 2024-06-07  AeroDynamics  478.09  0.007693\n","4100 2024-06-10  AeroDynamics  481.96  0.008095\n","4101 2024-06-11  AeroDynamics  482.99  0.002137"],"text/html":["\n","  <div id=\"df-945b4faa-83ae-49d8-b74b-55f3bccf66c5\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Date</th>\n","      <th>Symbol</th>\n","      <th>Close</th>\n","      <th>Return</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>4097</th>\n","      <td>2024-06-05</td>\n","      <td>AeroDynamics</td>\n","      <td>472.19</td>\n","      <td>0.010248</td>\n","    </tr>\n","    <tr>\n","      <th>4098</th>\n","      <td>2024-06-06</td>\n","      <td>AeroDynamics</td>\n","      <td>474.44</td>\n","      <td>0.004765</td>\n","    </tr>\n","    <tr>\n","      <th>4099</th>\n","      <td>2024-06-07</td>\n","      <td>AeroDynamics</td>\n","      <td>478.09</td>\n","      <td>0.007693</td>\n","    </tr>\n","    <tr>\n","      <th>4100</th>\n","      <td>2024-06-10</td>\n","      <td>AeroDynamics</td>\n","      <td>481.96</td>\n","      <td>0.008095</td>\n","    </tr>\n","    <tr>\n","      <th>4101</th>\n","      <td>2024-06-11</td>\n","      <td>AeroDynamics</td>\n","      <td>482.99</td>\n","      <td>0.002137</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-945b4faa-83ae-49d8-b74b-55f3bccf66c5')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-945b4faa-83ae-49d8-b74b-55f3bccf66c5 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-945b4faa-83ae-49d8-b74b-55f3bccf66c5');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-5f06ccd7-6dae-46d0-8e94-6b2e57fd27ac\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5f06ccd7-6dae-46d0-8e94-6b2e57fd27ac')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-5f06ccd7-6dae-46d0-8e94-6b2e57fd27ac button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 6300,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2024-06-05 00:00:00\",\n        \"max\": \"2024-08-30 00:00:00\",\n        \"num_unique_values\": 63,\n        \"samples\": [\n          \"2024-08-29 00:00:00\",\n          \"2024-08-23 00:00:00\",\n          \"2024-06-05 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Symbol\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 100,\n        \"samples\": [\n          \"StarEdge\",\n          \"NovaWorks\",\n          \"QuantumStream\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 116.30112039438919,\n        \"min\": 88.76,\n        \"max\": 519.51,\n        \"num_unique_values\": 5840,\n        \"samples\": [\n          368.96,\n          316.2,\n          312.63\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Return\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.012665257278634191,\n        \"min\": -0.04829878764176765,\n        \"max\": 0.0512181916621548,\n        \"num_unique_values\": 6297,\n        \"samples\": [\n          0.006352921507982945,\n          0.0007296747186911201,\n          0.001078725834426253\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":58}]},{"cell_type":"code","source":["#paso 7\n","#Calcular la desviación estándar de los retornos diarios\n","std_dev = df.groupby('Symbol')['Return'].std().reset_index()\n","std_dev.columns = ['Symbol', 'StandardDeviation']\n","\n","#Paso 8\n","#Calcular el rango de los retornos diarios\n","range_return = df.groupby('Symbol')['Return'].agg(lambda x: x.max() - x.min()).reset_index()\n","range_return.columns = ['Symbol', 'ReturnRange']\n","\n","#paso 9\n","#Calcular la media absoluta de los retornos diarios\n","mean_abs_return = df.groupby('Symbol')['Return'].apply(lambda x: x.abs().mean()).reset_index()\n","mean_abs_return.columns = ['Symbol', 'MeanAbsoluteReturn']\n","\n","# Combinar las métricas en un solo DataFrame\n","volatility_metrics = std_dev.merge(range_return, on='Symbol')\n","volatility_metrics = volatility_metrics.merge(mean_abs_return, on='Symbol')\n","\n","# Ver las primeras filas de las métricas de volatilidad\n","volatility_metrics.head()\n","\n","\"\"\" Interpretación: yo interpreto que esta desviación estándar más alta indica una mayor volatilidad.\n","Por ejemplo, \"AlphaSphere\" tiene una desviación estándar de 0.017074, que es la más alta entre los símbolos listados.\n"," sugiriendo que esta acción tiene los retornos más variables.\n","\"\"\""],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"collapsed":true,"id":"EPHfhm5foQ8S","executionInfo":{"status":"ok","timestamp":1724445117367,"user_tz":300,"elapsed":343,"user":{"displayName":"Jonnathan Bareño","userId":"04240742750931729838"}},"outputId":"86525607-95f3-48ef-e7b0-77e0a88ebbcc"},"execution_count":59,"outputs":[{"output_type":"execute_result","data":{"text/plain":["          Symbol  StandardDeviation  ReturnRange  MeanAbsoluteReturn\n","0   AeroDynamics           0.005807     0.020431            0.004722\n","1     AeroFusion           0.006909     0.024742            0.006027\n","2   AeroVentures           0.010294     0.033589            0.008916\n","3  AlphaDynamics           0.010098     0.035654            0.009372\n","4    AlphaSphere           0.017074     0.055670            0.015031"],"text/html":["\n","  <div id=\"df-328b70b4-2bf9-43de-a5c0-3e37c7b098cb\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Symbol</th>\n","      <th>StandardDeviation</th>\n","      <th>ReturnRange</th>\n","      <th>MeanAbsoluteReturn</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>AeroDynamics</td>\n","      <td>0.005807</td>\n","      <td>0.020431</td>\n","      <td>0.004722</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>AeroFusion</td>\n","      <td>0.006909</td>\n","      <td>0.024742</td>\n","      <td>0.006027</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>AeroVentures</td>\n","      <td>0.010294</td>\n","      <td>0.033589</td>\n","      <td>0.008916</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>AlphaDynamics</td>\n","      <td>0.010098</td>\n","      <td>0.035654</td>\n","      <td>0.009372</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>AlphaSphere</td>\n","      <td>0.017074</td>\n","      <td>0.055670</td>\n","      <td>0.015031</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-328b70b4-2bf9-43de-a5c0-3e37c7b098cb')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-328b70b4-2bf9-43de-a5c0-3e37c7b098cb button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-328b70b4-2bf9-43de-a5c0-3e37c7b098cb');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-5d138e20-6b1e-460a-8e48-1f3a33c2c082\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5d138e20-6b1e-460a-8e48-1f3a33c2c082')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-5d138e20-6b1e-460a-8e48-1f3a33c2c082 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"volatility_metrics","summary":"{\n  \"name\": \"volatility_metrics\",\n  \"rows\": 100,\n  \"fields\": [\n    {\n      \"column\": \"Symbol\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 100,\n        \"samples\": [\n          \"StarEdge\",\n          \"NovaWorks\",\n          \"QuantumStream\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"StandardDeviation\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0057483444967914655,\n        \"min\": 0.005507573804924238,\n        \"max\": 0.027598110450678812,\n        \"num_unique_values\": 100,\n        \"samples\": [\n          0.007330265488697961,\n          0.005596964821471508,\n          0.006807432984547627\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ReturnRange\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.02015910487672396,\n        \"min\": 0.01919065873789172,\n        \"max\": 0.09833649297661395,\n        \"num_unique_values\": 100,\n        \"samples\": [\n          0.02400160301129306,\n          0.020721460275240355,\n          0.02205540576762377\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MeanAbsoluteReturn\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.004982085908559091,\n        \"min\": 0.004708915857308021,\n        \"max\": 0.024212850472388036,\n        \"num_unique_values\": 100,\n        \"samples\": [\n          0.0062667907694288205,\n          0.004858661281166374,\n          0.005851191981911556\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":59}]},{"cell_type":"code","source":["#paso 10\n","# Combinar las métricas en un solo DataFrame\n","volatility_metrics = std_dev.merge(range_return, on='Symbol')\n","volatility_metrics = volatility_metrics.merge(mean_abs_return, on='Symbol')\n","\n","# Mostrar el DataFrame final\n","print(volatility_metrics.head())\n","\n","# Guardar el DataFrame en un archivo CSV (opcional)\n","volatility_metrics.to_csv('/content/volatility_metrics.csv', index=False)\n","\n","\"\"\"\n","Que se interpreto\n","Volatilidad: \"AlphaSphere\" es la acción más volátil y tiene los retornos diarios más extremos,\n","tanto en términos de desviación estándar como de rango de retornos.\n","También muestra la mayor media absoluta de los retornos, lo que sugiere que las fluctuaciones en el precio son grandes en promedio.\n","\n","Estabilidad: \"AeroDynamics\" es la acción con menor volatilidad y variabilidad en sus retornos.\n","Esto podría hacerla más estable y menos riesgosa en comparación con las otras acciones listadas.\n","\"\"\""],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"P3JrCF4po-hm","executionInfo":{"status":"ok","timestamp":1724445245313,"user_tz":300,"elapsed":582,"user":{"displayName":"Jonnathan Bareño","userId":"04240742750931729838"}},"outputId":"3475e501-ad4b-4710-a613-aed0c73b447a","collapsed":true},"execution_count":60,"outputs":[{"output_type":"stream","name":"stdout","text":["          Symbol  StandardDeviation  ReturnRange  MeanAbsoluteReturn\n","0   AeroDynamics           0.005807     0.020431            0.004722\n","1     AeroFusion           0.006909     0.024742            0.006027\n","2   AeroVentures           0.010294     0.033589            0.008916\n","3  AlphaDynamics           0.010098     0.035654            0.009372\n","4    AlphaSphere           0.017074     0.055670            0.015031\n"]}]},{"cell_type":"code","source":["#Paso 11 Escalamiento de datos.\n","from sklearn.preprocessing import StandardScaler\n","\n","# Crear una instancia del escalador\n","scaler = StandardScaler()\n","\n","# Seleccionar las columnas de métricas para escalar\n","metrics_columns = ['StandardDeviation', 'ReturnRange', 'MeanAbsoluteReturn']\n","\n","# Escalar las métricas\n","scaled_metrics = scaler.fit_transform(volatility_metrics[metrics_columns])\n","\n","# Crear un nuevo DataFrame con las métricas escaladas\n","scaled_volatility_metrics = pd.DataFrame(scaled_metrics, columns=metrics_columns)\n","scaled_volatility_metrics['Symbol'] = volatility_metrics['Symbol']\n","\n","# Mostrar el DataFrame escalado\n","print(scaled_volatility_metrics.head())\n","\n","# Guardar el DataFrame escalado en un archivo CSV (opcional)\n","scaled_volatility_metrics.to_csv('/content/scaled_volatility_metrics.csv', index=False)\n","\n","\n","\"\"\"\n","Con la desviacion Estandar\n"," Los valores negativos indican que la desviación estándar de estas acciones está por debajo del promedio global,\n"," mientras que el valor positivo para \"AlphaSphere\" indica que tiene una desviación estándar superior al promedio.\n"," \"AlphaSphere\" es significativamente más volátil en comparación con otras acciones, mientras que \"AeroDynamics\" y \"AeroFusion\"\n","  son menos volátiles.\n","\n","Con el rango de retornos.\n","como pudimos observar con la desviación estándar, los valores negativos sugieren que el rango de retornos de estas acciones está por debajo del promedio global,\n","mientras que el valor positivo para \"AlphaSphere\" indica que tiene un rango de retornos superior al promedio.\n","\"AlphaSphere\" muestra la mayor variabilidad en los retornos diarios.\n","\n","\n","y por ultimo con MeanAbsoluteReturn sucede igual.\n","\"\"\""],"metadata":{"id":"2WBF-Pz3pNPX","colab":{"base_uri":"https://localhost:8080/","height":192},"executionInfo":{"status":"ok","timestamp":1724446172650,"user_tz":300,"elapsed":573,"user":{"displayName":"Jonnathan Bareño","userId":"04240742750931729838"}},"outputId":"6f8051a1-fe08-4b51-a6ab-585ed6325122","collapsed":true},"execution_count":63,"outputs":[{"output_type":"stream","name":"stdout","text":["   StandardDeviation  ReturnRange  MeanAbsoluteReturn         Symbol\n","0          -0.963274    -0.908568           -1.030531   AeroDynamics\n","1          -0.770550    -0.693609           -0.767254     AeroFusion\n","2          -0.178762    -0.252528           -0.184346   AeroVentures\n","3          -0.212953    -0.149580           -0.092501  AlphaDynamics\n","4           1.006731     0.848298            1.049168    AlphaSphere\n"]},{"output_type":"execute_result","data":{"text/plain":["'\\nCon la desviacion Estandar\\n Los valores negativos indican que la desviación estándar de estas acciones está por debajo del promedio global,\\n mientras que el valor positivo para \"AlphaSphere\" indica que tiene una desviación estándar superior al promedio. \\n \"AlphaSphere\" es significativamente más volátil en comparación con otras acciones, mientras que \"AeroDynamics\" y \"AeroFusion\"\\n  son menos volátiles.\\n\\nCon el rango de retornos.\\n'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":63}]},{"cell_type":"code","source":["#Paso 12 Determinar el numero de clusters\n","#Clusterización\n","from sklearn.cluster import KMeans\n","import matplotlib.pyplot as plt\n","\n","# Definir el rango de posibles números de clústeres\n","max_clusters = 10\n","\n","# Lista para almacenar la suma de errores cuadráticos (SSE)\n","sse = []\n","\n","# Calcular SSE para cada número de clústeres\n","for k in range(1, max_clusters + 1):\n","    kmeans = KMeans(n_clusters=k, random_state=42)\n","    kmeans.fit(scaled_volatility_metrics[metrics_columns])\n","    sse.append(kmeans.inertia_)\n","\n","# Graficar el método del codo\n","plt.figure(figsize=(8, 5))\n","plt.plot(range(1, max_clusters + 1), sse, marker='o')\n","plt.xlabel('Número de Clústeres')\n","plt.ylabel('Suma de Errores Cuadráticos (SSE)')\n","plt.title('Método del Codo')\n","plt.show()\n","\n","\"\"\" Rango de posibles números de clústeres:\n","La gráfica muestra el SSE (Suma de Errores Cuadráticos) para números de clústeres que van de 1 a 10.\n","\n","Cálculo SSE para cada número de clústeres:\n","El SSE disminuye a medida que aumenta el número de clústeres, lo que indica que los clústeres adicionales están mejorando la precisión del modelo.\n","Método del Codo:\n","\n","En este caso, el codo parece estar alrededor de 3 o 4 clústeres. ###\n","\"\"\""],"metadata":{"id":"GtYYJ3NtVYx4","colab":{"base_uri":"https://localhost:8080/","height":925},"collapsed":true,"executionInfo":{"status":"ok","timestamp":1724444312426,"user_tz":300,"elapsed":1045,"user":{"displayName":"Jonnathan Bareño","userId":"04240742750931729838"}},"outputId":"0e62e39a-1bac-4a5e-d30c-b2a120004786"},"execution_count":48,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:1416: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n","  super()._check_params_vs_input(X, default_n_init=10)\n","/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:1416: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n","  super()._check_params_vs_input(X, default_n_init=10)\n","/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:1416: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n","  super()._check_params_vs_input(X, default_n_init=10)\n","/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:1416: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n","  super()._check_params_vs_input(X, default_n_init=10)\n","/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:1416: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n","  super()._check_params_vs_input(X, default_n_init=10)\n","/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:1416: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n","  super()._check_params_vs_input(X, default_n_init=10)\n","/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:1416: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n","  super()._check_params_vs_input(X, default_n_init=10)\n","/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:1416: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n","  super()._check_params_vs_input(X, default_n_init=10)\n","/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:1416: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n","  super()._check_params_vs_input(X, default_n_init=10)\n","/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:1416: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n","  super()._check_params_vs_input(X, default_n_init=10)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"execute_result","data":{"text/plain":["' Rango de posibles números de clústeres:\\nLa gráfica muestra el SSE (Suma de Errores Cuadráticos) para números de clústeres que van de 1 a 10.\\n\\nCálculo SSE para cada número de clústeres:\\nEl SSE disminuye a medida que aumenta el número de clústeres, lo que indica que los clústeres adicionales están mejorando la precisión del modelo.\\nMétodo del Codo:\\n\\nEn este caso, el codo parece estar alrededor de 3 o 4 clústeres. ###\\n'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":48}]},{"cell_type":"code","source":["#paso 13 y 14 Asigna los clusters a cada empresa en el DataFrame.\n","from sklearn.cluster import KMeans\n","\n","# Número óptimo de clústeres (por ejemplo, 3)\n","n_clusters = 3  # Reemplaza con el número óptimo de clústeres determinado\n","\n","# Ejecutar K-Means con el número óptimo de clústeres\n","kmeans = KMeans(n_clusters=n_clusters, random_state=42)\n","volatility_metrics['Cluster'] = kmeans.fit_predict(scaled_volatility_metrics[metrics_columns])\n","\n","# Ver el DataFrame con la asignación de clústeres\n","print(volatility_metrics.head())\n","\n","# Opcional: guardar el DataFrame con los clústeres asignados en un archivo CSV\n","volatility_metrics.to_csv('/content/volatility_metrics_with_clusters.csv', index=False)\n","\n","# Mostrar las primeras filas del DataFrame con las etiquetas de clúster\n","volatility_metrics.head()\n","\n","\"\"\"\n","Asignando clusters a cada empresa en el DataFrame.\n","Cluster 0: Incluye empresas con métricas de volatilidad (desviación estándar, rango de retornos, y media absoluta de retornos)\n","más bajas en comparación con el promedio global, ya que todos estos valores están en el rango negativo después del escalamiento.\n","\n","Cluster 1: Incluye a AlphaSphere, que tiene métricas de volatilidad significativamente más altas,\n","indicando que es más volátil en comparación con las empresas en el Cluster 0.\n","\n","\"\"\""],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":246},"collapsed":true,"id":"rBxDgvkwxkJn","executionInfo":{"status":"ok","timestamp":1724446405963,"user_tz":300,"elapsed":297,"user":{"displayName":"Jonnathan Bareño","userId":"04240742750931729838"}},"outputId":"31e9c460-785e-4926-ed25-5746b9bcf4aa"},"execution_count":66,"outputs":[{"output_type":"stream","name":"stdout","text":["          Symbol  StandardDeviation  ReturnRange  MeanAbsoluteReturn  Cluster\n","0   AeroDynamics           0.005807     0.020431            0.004722        0\n","1     AeroFusion           0.006909     0.024742            0.006027        0\n","2   AeroVentures           0.010294     0.033589            0.008916        0\n","3  AlphaDynamics           0.010098     0.035654            0.009372        0\n","4    AlphaSphere           0.017074     0.055670            0.015031        1\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:1416: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n","  super()._check_params_vs_input(X, default_n_init=10)\n"]},{"output_type":"execute_result","data":{"text/plain":["'\\nAsignando clusters a cada empresa en el DataFrame.\\nCluster 0: Incluye empresas con métricas de volatilidad (desviación estándar, rango de retornos, y media absoluta de retornos) más bajas en comparación con el promedio global, ya que todos estos valores están en el rango negativo después del escalamiento.\\nCluster 1: Incluye a AlphaSphere, que tiene métricas de volatilidad significativamente más altas, indicando que es más volátil en comparación con las empresas en el Cluster 0.\\n\\n'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":66}]},{"cell_type":"code","source":["#paso 15\n","# Unir el DataFrame de métricas con el DataFrame original para incluir los clústeres\n","df_with_clusters = df.merge(volatility_metrics[['Symbol', 'Cluster']], on='Symbol', how='left')\n","\n","# Ver el DataFrame con los clústeres asignados\n","print(df_with_clusters.head())\n","\n","# Opcional: guardar el DataFrame con los clústeres asignados en un archivo CSV\n","df_with_clusters.to_csv('/content/df_with_clusters.csv', index=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lEItB0qBy1Tc","executionInfo":{"status":"ok","timestamp":1724444322526,"user_tz":300,"elapsed":385,"user":{"displayName":"Jonnathan Bareño","userId":"04240742750931729838"}},"outputId":"e58e9dbe-0809-4566-bf5f-8ff1640b7369","collapsed":true},"execution_count":50,"outputs":[{"output_type":"stream","name":"stdout","text":["        Date        Symbol   Close    Return  Cluster\n","0 2024-06-04  AeroDynamics  467.40  0.002230        2\n","1 2024-06-05  AeroDynamics  472.19  0.010248        2\n","2 2024-06-06  AeroDynamics  474.44  0.004765        2\n","3 2024-06-07  AeroDynamics  478.09  0.007693        2\n","4 2024-06-10  AeroDynamics  481.96  0.008095        2\n"]}]},{"cell_type":"code","source":["#16 @title StandardDeviation vs ReturnRange\n","\n","from matplotlib import pyplot as plt\n","volatility_metrics.plot(kind='scatter', x='StandardDeviation', y='ReturnRange', s=32, alpha=.8)\n","plt.gca().spines[['top', 'right',]].set_visible(False)\n","\n","\"\"\"\n","La dispersión de los puntos se amplía a medida que aumenta la desviación estándar,\n","lo que podría indicar que los activos con mayor volatilidad tienen una mayor variabilidad en sus retornos.\n","\n","\"\"\"\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":449},"id":"__iJJVVt2Ntj","executionInfo":{"status":"ok","timestamp":1724444941875,"user_tz":300,"elapsed":422,"user":{"displayName":"Jonnathan Bareño","userId":"04240742750931729838"}},"outputId":"e4b8a259-69ed-46d5-ca20-51619ea727ef","collapsed":true},"execution_count":57,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# conclusiones.\n","\"\"\"Resumen de Conclusiones del Análisis y Clusterización\n","Correlación Positiva: Se observó una correlación positiva entre la desviación estándar y el rango de retorno.\n","Esto indica que a mayor volatilidad (desviación estándar), mayor es el rango de retorno.\n","\n","Volatilidad y Riesgo: La desviación estándar es una medida de volatilidad. Un mayor valor de desviación estándar sugiere mayor volatilidad,\n","lo que generalmente se asocia con un mayor riesgo y potencial de retorno.\n","\n","Dispersión de Datos: La dispersión de los puntos aumenta con la desviación estándar,\n","lo que podría indicar que los activos con mayor volatilidad tienen una mayor variabilidad en sus retornos.\n","\n","Análisis de Clústeres: Si se identifican agrupaciones de puntos,\n","se pueden realizar análisis de clústeres para identificar patrones o grupos de activos con características similares.\n","\n","\n","Utilidad para la Toma de Decisiones Financieras\n","\n","Identificación de Oportunidades de Inversión: Al identificar clústeres de activos con características similares,\n","los inversores pueden encontrar oportunidades de inversión que se alineen con su perfil de riesgo y objetivos de retorno.\n","\n","Gestión de Riesgos: Comprender la relación entre la volatilidad y el rango de retorno ayuda a los inversores a gestionar mejor el riesgo.\n","Pueden decidir diversificar su cartera para incluir activos con diferentes niveles de volatilidad.\n","Optimización de Portafolios: El análisis de clústeres permite a los gestores de fondos\n","optimizar sus portafolios seleccionando una combinación de activos que maximice el retorno esperado para un nivel de riesgo dado.\n","\n","Toma de Decisiones Informadas: Con una mejor comprensión de cómo la volatilidad afecta los retornos, los inversores pueden tomar decisiones más informadas sobre cuándo comprar o vender activos.\n","Este análisis proporciona una base sólida para tomar decisiones financieras estratégicas, alineando las inversiones con los objetivos y tolerancia al riesgo del inversor.\n","\n","\"\"\"\n","\n","\n"],"metadata":{"id":"Baz6RUvi2r73","executionInfo":{"status":"ok","timestamp":1724445786987,"user_tz":300,"elapsed":569,"user":{"displayName":"Jonnathan Bareño","userId":"04240742750931729838"}}},"execution_count":61,"outputs":[]}]}